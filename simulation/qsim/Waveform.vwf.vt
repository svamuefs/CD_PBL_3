// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/15/2024 19:36:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          automacao
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module automacao_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CH;
reg PG;
reg RO;
reg assync;
reg clk50MHz;
reg start;
// wires                                               
wire A;
wire AD;
wire BZ_T;
wire EV;
wire GP_T;
wire M;
wire MC_T;
wire VE;
wire debouncedStart_T;
wire [3:0] display_colune;
wire [6:0] display_data;
wire enable_T;
wire pulse_T;
wire reabastecer_T;

// assign statements (if any)                          
automacao i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AD(AD),
	.BZ_T(BZ_T),
	.CH(CH),
	.EV(EV),
	.GP_T(GP_T),
	.M(M),
	.MC_T(MC_T),
	.PG(PG),
	.RO(RO),
	.VE(VE),
	.assync(assync),
	.clk50MHz(clk50MHz),
	.debouncedStart_T(debouncedStart_T),
	.display_colune(display_colune),
	.display_data(display_data),
	.enable_T(enable_T),
	.pulse_T(pulse_T),
	.reabastecer_T(reabastecer_T),
	.start(start)
);
initial 
begin 
#1000000 $finish;
end 

// clk50MHz
always
begin
	clk50MHz = 1'b0;
	clk50MHz = #5000 1'b1;
	#5000;
end 

// start
initial
begin
	start = 1'b1;
	start = #30000 1'b0;
	start = #100000 1'b1;
end 

// PG
initial
begin
	PG = 1'b1;
end 

// CH
initial
begin
	CH = 1'b1;
end 

// RO
always
begin
	RO = 1'b0;
	RO = #25000 1'b1;
	#25000;
end 

// assync
always
begin
	assync = 1'b0;
	assync = #37500 1'b1;
	#12500;
end 
endmodule

